openapi: 3.0.0
info:
  title: WASAPhoto API
  version: 1.0.0
  description: WASAPhoto API for our uni course on web and software architecture
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /user:
    post:
      summary: Create User
      description: Create a new user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
                birthday:
                  type: string
                security_question:
                  type: string
                matricola:
                  type: integer
                
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{userId}:
    get:
      summary: Get User Profile
      description: Get the profile of a user.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userProfile:
                    type: object
                    # Define user profile properties here
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comment:
    post:
      summary: Comment on Photo
      description: Comment on a photo.
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  type: string
                comment:
                  type: string
      responses:
        '200':
          description: Comment added to the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comment/{commentId}:
    delete:
      summary: Remove Comment from Photo
      description: Remove a comment from a photo.
      operationId: uncommentPhoto
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Comment removed from the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /like:
    post:
      summary: Like Photo
      description: Like a photo.
      operationId: likePhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  type: string
      responses:
        '200':
          description: Photo liked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /like/{likeId}:
    delete:
      summary: Unlike Photo
      description: Unlike a photo.
      operationId: unlikePhoto
      parameters:
        - name: likeId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo unliked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photo:
    post:
      summary: Upload Photo
      description: Upload a photo.
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photo/{photoId}:
    delete:
      summary: Delete Photo
      description: Delete a photo.
      operationId: deletePhoto
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
