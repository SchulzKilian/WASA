openapi: 3.0.0
info:
  title: WASAPhoto API
  version: 1.0.0
  description: WASAPhoto API for our university course on web and software architecture
tags:
  - name: login
  - name: user
  - name: comment
  - name: like
  - name: photo
  
security:
  - BearerAuth: []
  
  
paths:
  /session:
    post:
      tags: [login]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name
                  minLength: 3
                  maxLength: 50
                  pattern: "^[a-zA-Z0-9_]+$"  # Add a pattern for every string property
              description: General user object
                  
          
        required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User' # Add a pattern for every string property
                    
                

  /users/:
    post:
      tags: [user]
      summary: Create User
      description: Create a new user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      tags: [user]
      summary: Get User Profile
      description: Get the profile of a user.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'

      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
    
  /users/{userId}/ban:
    post:
      tags: [user]
      summary: Ban User
      description: Ban a user.
      operationId: banUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/User/properties/userId'
              description: the user id of the user banning
      responses:
        '201':
          description: User banned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: Returing a message about what user is banned
                description: The output for banning a user
  
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /users/{userId}/stream:
    get:
      tags: [user]
      summary: Get My Stream
      description: Retrieve the user's stream.
      parameters:
          - name: userId
            in: path
            required: true
            schema:
              $ref: '#/components/schemas/User/properties/userId'
      operationId: getMyStream
      
  
      responses:
        '200':
          description: User's stream retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stream:
                    type: array
                    minItems: 0
                    maxItems: 100
                    description: all the stuff user needs for his for you page
                    items:
                      type: object
                      description: Stream item
                      properties:
                        itemProperty:
                          type: string
                          description: Description of item property
                          pattern: "^[a-zA-Z0-9_]+$"
                          minLength: 10
                          maxLength: 100
                description: The entire stream with info for the user
  
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'             
  /users/{userId}/name:
    put:
      tags: [user]
      summary: Set My User Name
      description: Set the user's username.
      operationId: setMyUserName
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

      responses:
        '201':
          description: User's username updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'            
  
  /users/{userId}/unban:
    post:
      tags: [user]
      summary: Unban User
      description: Unban a user.
      operationId: unbanUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        required: true
        content:
      
          application/json:
            schema:
              $ref: '#/components/schemas/User'
  
      responses:
        '200':
          description: User unbanned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: telling the user it worked
                description: the response for unbanning a user
  
        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                
                
  /users/{userId}/follow:
    post:
      tags: [user]
      summary: Follow User
      description: Follow a user.
      operationId: followUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
          description: the id of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/User/properties/userId'
              description: follow confirmation

      responses:
        '201':
          description: User followed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: the success message
                description: The general response to following

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/unfollow:
    post:
      tags: [user]
      summary: Unfollow User
      description: Unfollow a user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
          
      operationId: unfollowUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  $ref: '#/components/schemas/User/properties/userId'

      responses:
        '200':
          description: User unfollowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: unfollow message
                description: The response to unfollowing

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photos/{photoId}/comments/:
    post:
      tags: [comment]
      summary: Comment on Photo
      description: Comment on a photo.
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Photo/properties/photoId'
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  $ref: '#/components/schemas/Photo/properties/photoId'
              description: the comment response

      responses:
        '201':
          description: Comment added to the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: the message
                description: the object returned

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/{commentId}:
    delete:
      tags: [comment]
      summary: Remove Comment from Photo
      description: Remove a comment from a photo.
      operationId: uncommentPhoto
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            minLength: 10
            maxLength: 20
            pattern: "^[a-zA-Z0-9_]+$"
            description: The comment ID

      responses:
        '200':
          description: Comment removed from the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: Telling the user you removed the comment
                description: The entire response

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photos/{photoId}/like:
    post:
      tags: [like, photo]
      summary: Like Photo
      description: Like a photo.
      operationId: likePhoto
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Photo/properties/photoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userID:
                  $ref: '#/components/schemas/User/properties/userId'
              description: Return message of liking

      responses:
        '201':
          description: Photo liked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: "^[a-zA-Z0-9_]+$"
                    description: telling the user he liked
                description: the entire response

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


     

  /likes/{likeId}:
    delete:
      tags: [like]
      summary: Unlike Photo
      description: Unlike a photo.
      operationId: unlikePhoto
      parameters:
        - name: likeId
          in: path
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]{10,20}$' 
            minLength: 10
            maxLength: 100 # Pattern added
            description: unique like id
      responses:
        '200':
          description: Photo unliked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: '^[a-zA-Z0-9]{10,20}$'
                    description: saying you unliked correctly
                description: response to unliking

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/photos/:
    post:
      tags: [photo]
      summary: Upload Photo
      description: Upload a photo.
      operationId: uploadPhoto
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/User/properties/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  description: Base64-encoded image data
                  minLength: 50
                  maxLength: 500000
                  pattern: '^[a-zA-Z0-9]{10,20}$'
              description: response to uploading a photo
      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId:
                    $ref: '#/components/schemas/Photo/properties/photoId'
                description: The response to uploading a photo succesfuly
                

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photos/{photoId}/delete:
    delete:
      tags: [photo]
      summary: Delete Photo
      description: Delete a photo.
      operationId: deletePhoto
      parameters:
        - name: photoId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/Photo/properties/photoId'
      responses:
        '200':
          description: Photo deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200
                    pattern: '^[a-zA-Z0-9]{10,20}$'
                    description: You uploaded succesfully
                description: Response to upload succesfully

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          maxLength: 200
          pattern: '^[a-zA-Z0-9]{10,20}$'
          description: Describes the more specific error I am putting out
      description: The overall error object
      
    User:
      type: object
      properties:
        userId:
          type: string
          minLength: 10
          maxLength: 20
          pattern: "^[a-zA-Z0-9_]+$"
          description: A unique user identifier
        username:
          type: string
          minLength: 4
          maxLength: 30
          pattern: "^[a-zA-Z0-9_]+$"
          description: User's username
        password:
          type: string
          minLength: 8
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
          description: User's password
        email:
          type: string
          minLength: 5
          maxLength: 100
          pattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$"
          description: User's email
        birthday:
          type: string
          minLength: 7
          maxLength: 10
          pattern: "^d{4}-d{2}-d{2}$"
          description: User's birthday
        security_question:
          type: string
          minLength: 10
          maxLength: 150
          pattern: "^[a-zA-Z0-9_]+$"
          description: User's security question
        matricola:
          type: integer
          description: the student's enrolment code
          
    Photo:
      type: object
      properties:
        photoId:
          type: string
          minLength: 10
          maxLength: 20
          pattern: '^[a-zA-Z0-9_]+$'
          description: A unique photo identifier
        imageData:
          type: string
          description: Base64-encoded image data
          minLength: 50
          maxLength: 500000
          pattern: '^[a-zA-Z0-9]{10,20}$'
          example: 'base64encodedimagedata'
      required:
        - imageData
          
          

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 
