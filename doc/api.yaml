openapi: 3.0.0
info:
  title: WASAPhoto API
  version: 1.0.0
  description: WASAPhoto API for our university course on web and software architecture
tags:
  - name: login
  - name: user
  - name: comment
  - name: like
  - name: photo
  
security:
  - BearerAuth: []
  
  
paths:
  /session:
    post:
      tags: [login]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's name
                  minLength: 3
                  maxLength: 50
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    minLength: 10
                    maxLength: 20

  /user:
    post:
      tags: [user]
      summary: Create User
      description: Create a new user.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username
                  minLength: 4
                  maxLength: 30
                password:
                  type: string
                  description: User's password
                  minLength: 8
                  maxLength: 50
                email:
                  type: string
                  description: User's email
                  minLength: 5
                  maxLength: 100
                birthday:
                  type: string
                  description: User's birthday
                security_question:
                  type: string
                  description: User's security question
                  minLength: 10
                  maxLength: 150
                matricola:
                  type: integer

      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    minLength: 10
                    maxLength: 20

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/{userId}:
    get:
      tags: [user]
      summary: Get User Profile
      description: Get the profile of a user.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            minLength: 10
            maxLength: 20

      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userProfile:
                    type: object
                    description: User's profile

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comment:
    post:
      summary: Comment on Photo
      description: Comment on a photo.
      operationId: commentPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  type: string
                  description: Photo ID
                  minLength: 10
                  maxLength: 20
                comment:
                  type: string
                  description: User's comment
                  minLength: 1
                  maxLength: 500

      responses:
        '201':
          description: Comment added to the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comment/{commentId}:
    delete:
      summary: Remove Comment from Photo
      description: Remove a comment from a photo.
      operationId: uncommentPhoto
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            minLength: 10
            maxLength: 20

      responses:
        '200':
          description: Comment removed from the photo successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /like:
    post:
      summary: Like Photo
      description: Like a photo.
      operationId: likePhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photoId:
                  type: string
                  description: Photo ID
                  minLength: 10
                  maxLength: 20

      responses:
        '201':
          description: Photo liked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /like/{likeId}:
    delete:
      summary: Unlike Photo
      description: Unlike a photo.
      operationId: unlikePhoto
      parameters:
        - name: likeId
          in: path
          required: true
          schema:
            type: string
            minLength: 10
            maxLength: 20

      responses:
        '200':
          description: Photo unliked successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /photo:
    post:
      summary: Upload Photo
      description: Upload a photo.
      operationId: uploadPhoto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  description: Base64-encoded image data
                  minLength: 50
                  maxLength: 500000

      responses:
        '201':
          description: Photo uploaded successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  photoId:
                    type: string
                    minLength: 10
                    maxLength: 20

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /unfollowUser:
    post:
      summary: Unfollow User
      description: Unfollow a user.
      operationId: unfollowUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID to unfollow
                  minLength: 10
                  maxLength: 20

      responses:
        '200':
          description: User unfollowed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /banUser:
    post:
      summary: Ban User
      description: Ban a user.
      operationId: banUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID to ban
                  minLength: 10
                  maxLength: 20

      responses:
        '200':
          description: User banned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /unbanUser:
    post:
      summary: Unban User
      description: Unban a user.
      operationId: unbanUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID to unban
                  minLength: 10
                  maxLength: 20

      responses:
        '200':
          description: User unbanned successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /getMyStream:
    get:
      summary: Get My Stream
      description: Retrieve the user's stream.
      operationId: getMyStream

      responses:
        '200':
          description: User's stream retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  stream:
                    type: array
                    items:
                      type: object
                      description: Stream item

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /setMyUserName:
    put:
      summary: Set My User Name
      description: Set the user's username.
      operationId: setMyUserName
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: New username
                  minLength: 4
                  maxLength: 30

      responses:
        '200':
          description: User's username updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /followUser:
    post:
      summary: Follow User
      description: Follow a user.
      operationId: followUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: User ID to follow
                  minLength: 10
                  maxLength: 20

      responses:
        '200':
          description: User followed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                    maxLength: 200

        '401':
          description: Unauthorized. User authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          minLength: 1
          maxLength: 200

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
